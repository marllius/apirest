---
# yamllint disable rule:line-length

- name: Make sure handlers are flushed immediately
  meta: flush_handlers

- block:
    - name: Create a stanza cluster
      run_once: true
      become: true
      command: sudo -u pgbackrest pgbackrest --stanza={{ pgbackrest_stanza }} stanza-create
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      changed_when: false

    - name: Generate 1 full backup using pgbackrest
      run_once: true
      become: true
      command: sudo -u pgbackrest pgbackrest --stanza={{ pgbackrest_stanza }} backup
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      changed_when: false

    - name: Check postgresql cluster backup info
      run_once: true
      become: true
      command: sudo -u pgbackrest pgbackrest --stanza={{ pgbackrest_stanza }} info --log-level-console info
      register: bkp_info_result
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      changed_when: false

    - name: PostgreSQL Cluster backup info
      run_once: true
      debug:
        var: bkp_info_result.stdout_lines
  ignore_errors: true
  when: "'pgbackrest' in group_names"

- block:
    - name: Check postgresql cluster health
      run_once: true
      become: true
      become_user: postgres
      command: patronictl -c /etc/patroni/patroni.yml list
      register: patronictl_result
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      changed_when: false

    - name: PostgreSQL Cluster health
      run_once: true
      debug:
        var: patronictl_result.stdout_lines
  ignore_errors: true
  when: "'postgres_cluster' in group_names"

- block:
    - name: Get postgresql database list
      run_once: true
      become: true
      become_user: postgres
      command:
        "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -U postgres -c
        \"
          SELECT
          d.datname as name,
          pg_get_userbyid(d.datdba) as owner,
          pg_encoding_to_char(d.encoding) as encoding,
          d.datcollate as collate,
          d.datctype as ctype,
          CASE
          WHEN has_database_privilege(d.datname, 'CONNECT')
          THEN pg_size_pretty(pg_database_size(d.datname))
          ELSE 'No Access'
          END
          size,
          t.spcname as tablespace
          FROM pg_catalog.pg_database d
          JOIN pg_catalog.pg_tablespace t
          ON d.dattablespace = t.oid
          WHERE NOT datistemplate
          ORDER BY 1
        \""
      register: dbs_result
      delegate_to: "{{ groups.master[0] }}"
      changed_when: false

    - name: PostgreSQL list of databases
      run_once: true
      debug:
        var: dbs_result.stdout_lines
  ignore_errors: true

- block:
    - name: PostgreSQL Cluster connection info
      run_once: true
      debug:
        msg:
          - +------------------------------------------------+
          - address (VIP) {{ cluster_vip }}
          - port {{ haproxy_listen_port.master }} (read/write) master
          - port {{ haproxy_listen_port.replicas }} (read only)  all replicas
          - port {{ haproxy_listen_port.replicas_sync }} (read only)  synchronous replica only
          - port {{ haproxy_listen_port.replicas_async }} (read only)  asynchronous replicas only
          - +------------------------------------------------+
      when: synchronous_mode|bool

    - name: PostgreSQL Cluster connection info
      run_once: true
      debug:
        msg:
          - +------------------------------------------------+
          - address (VIP) {{ cluster_vip }}
          - port {{ haproxy_listen_port.master }} (read/write) master
          - port {{ haproxy_listen_port.replicas }} (read only)  all replicas
          - +------------------------------------------------+
      when: not synchronous_mode|bool

- block:
    - name: Get vip info
      set_fact:
        man_ip: "{{ item }}"
      loop: "{{ ansible_all_ipv4_addresses }}"
      when: item == cluster_vip

    - name: Virtual IP Address (VIP) info
      debug:
        msg:
          "Cluster ip address (VIP) {{ cluster_vip }}
           is running on server {{ ansible_hostname }}"
      when: man_ip is defined and man_ip == cluster_vip
  when: cluster_vip is defined and cluster_vip | length > 0
  ignore_errors: true
...
